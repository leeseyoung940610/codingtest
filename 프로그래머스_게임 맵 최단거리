#include<iostream>
#include<vector>
#include<queue>
using namespace std;

int cmap [101][101] = { 0 };
int minmap [101][101] = { 1 };
queue<pair<int, int>> q;

int yt[4] = { 1, 0, -1, 0 };
int xt[4] = { 0, 1, 0 , -1 };
int n, m = 0;
bool visited[101][101] = { false };

void BFS()
{
    q.push(make_pair(0, 0));
    
    visited[0][0] = true;
    
    while(!q.empty())
    {
        int y = q.front().first;
        int x = q.front().second;
        
        q.pop();
        
        for(int i = 0; i<4; i++)
        {
            int ypos = y + yt[i];
            int xpos = x + xt[i];
            
            if(ypos>=n || xpos >=m || ypos < 0 || xpos < 0)
                continue;
            
            if(!visited[ypos][xpos] && cmap[ypos][xpos] == 1)
            {
                minmap[ypos][xpos] = minmap[y][x] + 1;
                visited[ypos][xpos] = true;
                q.push(make_pair(ypos, xpos));
            }
        }
    }
}

int solution(vector<vector<int> > maps)
{
    int answer = 0;
    
    for(int i = 0; i<maps.size(); i++)
    {
        n = maps.size();
        for(int j = 0; j<maps[i].size(); j++)
        {
            m = maps[i].size();
            cmap[i][j] = maps[i][j];
        }
    }
    
    BFS();
    
    for(int i = 0; i<maps.size(); i++)
    {
        for(int j = 0; j<maps[i].size(); j++)
        {
            cout<<minmap[i][j]<<" ";
            
        }
        cout<<endl;
    }
    
    answer = minmap[n-1][m-1] == 0 ? -1 : minmap[n-1][m-1];
    
    return answer;
}
